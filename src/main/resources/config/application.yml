server:
  port: 8080
  jetty:
    max-http-form-post-size: 2GB

spring:
  application:
    name: yanagishima
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  web:
    resources:
      static-locations: file:web
## Choose one of the following databases
## MySQL
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: password
    url: jdbc:mysql://localhost:3306/yanagishima?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true
  sql:
    init:
      mode: always
      platform: mysql
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
### PostgreSQL
#  datasource:
#    driver-class-name: org.postgresql.Driver
#    username: postgres
#    password: password
#    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=yanagishima
#  jpa:
#    database-platform: org.hibernate.dialect.PostgreSQLDialect
#  sql:
#    init:
#      mode: always
#      platform: postgres
### SQLite
#  datasource:
#    driver-class-name: org.sqlite.JDBC
#    url: jdbc:sqlite:yanagishima.db
#  jpa:
#    database-platform: org.sqlite.hibernate.dialect.SQLiteDialect
#  sql:
#    init:
#      mode: always
#      platform: sqlite



# Metrics
management:
  metrics:
    export.prometheus.enabled: true
    distribution:
      percentiles:
        http.server.requests: 0.5, 0.75, 0.95, 0.99
  endpoint:
    metrics.enabled: true
    prometheus.enabled: true
    heapdump.enabled: false
    health:
      show-details: always
    env:
      keys-to-sanitize: .*password.*
  endpoints:
    web.exposure.include: '*'

# Datasources
sql.query.engines: trino
check.datasource: false
select.limit: 500
audit.http.header.name: some.auth.header
use.audit.http.header.name: false
to.values.query.limit: 500
cors.enabled: true

# Presto
presto.datasources: docker-presto
presto.query.max-run-time-seconds: 1800
presto.max-result-file-byte-size: 1073741824
auth.docker-presto: false
presto.coordinator.server.docker-presto: http://localhost:18080
presto.redirect.server.docker-presto: http://localhost:18080/ui
catalog.docker-presto: tpch
schema.docker-presto: sf1

# Trino
trino.datasources: docker-trino
trino.query.max-run-time-seconds: 1800
trino.max-result-file-byte-size: 1073741824
auth.docker-trino: false
trino.coordinator.server.docker-trino: http://localhost:18081
trino.redirect.server.docker-trino: http://localhost:18081/ui
catalog.docker-trino: tpch
schema.docker-trino: sf1

# Hive
hive.datasources: docker-hive
hive.jdbc.url.docker-hive: jdbc:hive2://localhost:10000/default
hive.jdbc.user.docker-hive: yanagishima
hive.jdbc.password.docker-hive: yanagishima
hive.query.max-run-time-seconds: 3600
hive.query.max-run-time-seconds.docker-hive: 3600
resource.manager.url.docker-hive: http://localhost:8088
hive.max-result-file-byte-size: 1073741824

# Spark
spark.datasources: docker-spark
spark.jdbc.url.docker-spark: jdbc:hive2://localhost:10001
spark.web.url.docker-spark: http://localhost:14040
resource.manager.url.docker-spark: http://localhost:18088
